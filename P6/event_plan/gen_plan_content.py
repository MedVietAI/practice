#!/usr/bin/env python3
"""
Content generator for Vietnam 80th Anniversary event plan
Uses Gemini AI to generate comprehensive event planning content
"""

import os
import json
import re
from openai import OpenAI
from config import API_KEY, BASE_URL, OUTPUT_DIR, EVENT_TITLE, EVENT_FRAMEWORK, TIMELINE_START, TIMELINE_END

def generate_event_plan():
    """Generate comprehensive event plan using Gemini AI"""
    
    # Initialize OpenAI client with custom base URL
    client = OpenAI(api_key=API_KEY, base_url=BASE_URL)
    
    # Comprehensive prompt for event planning
    prompt = {
        "role": "user",
        "content": f"""
So·∫°n d√†n √Ω k·∫ø ho·∫°ch s·ª± ki·ªán k·ª∑ ni·ªám 80 nƒÉm Qu·ªëc kh√°nh 2/9 theo khung A90 (T-60‚ÜíT+30).

Tr·∫£ JSON v·ªõi c·∫•u tr√∫c sau:
{{
  "title": "Ti√™u ƒë·ªÅ ch√≠nh c·ªßa s·ª± ki·ªán",
  "objectives": [
    "M·ª•c ti√™u 1: T√¥n vinh truy·ªÅn th·ªëng l·ªãch s·ª≠",
    "M·ª•c ti√™u 2: Gi√°o d·ª•c th·∫ø h·ªá tr·∫ª",
    "M·ª•c ti√™u 3: Th√∫c ƒë·∫©y tinh th·∫ßn ƒëo√†n k·∫øt d√¢n t·ªôc"
  ],
  "scope": [
    "Ph·∫°m vi ƒë·ªãa l√Ω: To√†n qu·ªëc",
    "ƒê·ªëi t∆∞·ª£ng tham gia: C√¥ng d√¢n Vi·ªát Nam v√† ki·ªÅu b√†o",
    "Th·ªùi gian: 90 ng√†y (T-60 ƒë·∫øn T+30)",
    "N·ªôi dung: L·ªÖ k·ª∑ ni·ªám, tri·ªÉn l√£m, h·ªôi th·∫£o, ho·∫°t ƒë·ªông vƒÉn h√≥a"
  ],
  "stakeholders": [
    "Ban Ch·∫•p h√†nh Trung ∆∞∆°ng ƒê·∫£ng",
    "Ch√≠nh ph·ªß v√† c√°c b·ªô, ng√†nh",
    "·ª¶y ban Trung ∆∞∆°ng M·∫∑t tr·∫≠n T·ªï qu·ªëc Vi·ªát Nam",
    "C√°c t·ªï ch·ª©c ch√≠nh tr·ªã - x√£ h·ªôi",
    "Ch√≠nh quy·ªÅn ƒë·ªãa ph∆∞∆°ng c√°c c·∫•p",
    "C√°c c∆° quan truy·ªÅn th√¥ng",
    "Nh√¢n d√¢n v√† ki·ªÅu b√†o"
  ],
  "timeline": [
    {{
      "phase": "Chu·∫©n b·ªã",
      "window": "T-60 ƒë·∫øn T-30",
      "workstreams": [
        "Th√†nh l·∫≠p Ban ch·ªâ ƒë·∫°o",
        "X√¢y d·ª±ng k·∫ø ho·∫°ch chi ti·∫øt",
        "Ph√¢n b·ªï ng√¢n s√°ch",
        "Tuy·ªÉn ch·ªçn ƒë·ªãa ƒëi·ªÉm"
      ]
    }},
    {{
      "phase": "Tri·ªÉn khai",
      "window": "T-30 ƒë·∫øn T-7",
      "workstreams": [
        "T·ªï ch·ª©c c√°c ho·∫°t ƒë·ªông tuy√™n truy·ªÅn",
        "Chu·∫©n b·ªã h·∫≠u c·∫ßn",
        "T·∫≠p hu·∫•n l·ª±c l∆∞·ª£ng",
        "Ki·ªÉm tra an ninh"
      ]
    }},
    {{
      "phase": "Th·ª±c hi·ªán",
      "window": "T-7 ƒë·∫øn T+1",
      "workstreams": [
        "T·ªï ch·ª©c l·ªÖ k·ª∑ ni·ªám ch√≠nh",
        "C√°c ho·∫°t ƒë·ªông vƒÉn h√≥a",
        "Truy·ªÅn h√¨nh tr·ª±c ti·∫øp",
        "ƒê·∫£m b·∫£o an ninh tr·∫≠t t·ª±"
      ]
    }},
    {{
      "phase": "K·∫øt th√∫c",
      "window": "T+1 ƒë·∫øn T+30",
      "workstreams": [
        "T·ªïng k·∫øt ƒë√°nh gi√°",
        "B√°o c√°o k·∫øt qu·∫£",
        "L∆∞u tr·ªØ t√†i li·ªáu",
        "Tri √¢n c√°c ƒë∆°n v·ªã tham gia"
      ]
    }}
  ],
  "program": [
    {{
      "name": "L·ªÖ k·ª∑ ni·ªám ch√≠nh th·ª©c",
      "goal": "T√¥n vinh 80 nƒÉm Qu·ªëc kh√°nh",
      "owner": "Ban T·ªï ch·ª©c Trung ∆∞∆°ng",
      "resources": "S√¢n v·∫≠n ƒë·ªông, h·ªá th·ªëng √¢m thanh, √°nh s√°ng",
      "venue": "Qu·∫£ng tr∆∞·ªùng Ba ƒê√¨nh, H√† N·ªôi"
    }},
    {{
      "name": "Tri·ªÉn l√£m l·ªãch s·ª≠",
      "goal": "Gi√°o d·ª•c truy·ªÅn th·ªëng c√°ch m·∫°ng",
      "owner": "B·∫£o t√†ng L·ªãch s·ª≠ Qu·ªëc gia",
      "resources": "Hi·ªán v·∫≠t, t√†i li·ªáu, c√¥ng ngh·ªá tr√¨nh chi·∫øu",
      "venue": "B·∫£o t√†ng L·ªãch s·ª≠ Qu·ªëc gia"
    }},
    {{
      "name": "H·ªôi th·∫£o khoa h·ªçc",
      "goal": "Nghi√™n c·ª©u gi√° tr·ªã l·ªãch s·ª≠",
      "owner": "Vi·ªán L·ªãch s·ª≠ ƒê·∫£ng",
      "resources": "Chuy√™n gia, t√†i li·ªáu nghi√™n c·ª©u",
      "venue": "H·ªôi tr∆∞·ªùng l·ªõn"
    }}
  ],
  "communications": [
    {{
      "channel": "Truy·ªÅn h√¨nh",
      "message": "Truy·ªÅn h√¨nh tr·ª±c ti·∫øp l·ªÖ k·ª∑ ni·ªám",
      "key_dates": "2/9/2025"
    }},
    {{
      "channel": "B√°o ch√≠",
      "message": "ƒê∆∞a tin v·ªÅ c√°c ho·∫°t ƒë·ªông k·ª∑ ni·ªám",
      "key_dates": "T-30 ƒë·∫øn T+7"
    }},
    {{
      "channel": "M·∫°ng x√£ h·ªôi",
      "message": "Lan t·ªèa th√¥ng ƒëi·ªáp y√™u n∆∞·ªõc",
      "key_dates": "T-60 ƒë·∫øn T+30"
    }}
  ],
  "logistics": [
    {{
      "item": "ƒê·ªãa ƒëi·ªÉm t·ªï ch·ª©c",
      "details": "Chu·∫©n b·ªã s√¢n kh·∫•u, gh·∫ø ng·ªìi, h·ªá th·ªëng √¢m thanh",
      "deadline": "T-15"
    }},
    {{
      "item": "V·∫≠n chuy·ªÉn",
      "details": "ƒê∆∞a ƒë√≥n kh√°ch m·ªùi, v·∫≠n chuy·ªÉn thi·∫øt b·ªã",
      "deadline": "T-1"
    }},
    {{
      "item": "Catering",
      "details": "Ph·ª•c v·ª• ƒÉn u·ªëng cho kh√°ch m·ªùi",
      "deadline": "T-7"
    }}
  ],
  "budget": [
    {{
      "category": "T·ªï ch·ª©c s·ª± ki·ªán",
      "planned": "2.000.000.000 VNƒê",
      "notes": "Bao g·ªìm thu√™ ƒë·ªãa ƒëi·ªÉm, thi·∫øt b·ªã, nh√¢n l·ª±c"
    }},
    {{
      "category": "Truy·ªÅn th√¥ng",
      "planned": "500.000.000 VNƒê",
      "notes": "Qu·∫£ng c√°o, s·∫£n xu·∫•t n·ªôi dung"
    }},
    {{
      "category": "H·∫≠u c·∫ßn",
      "planned": "300.000.000 VNƒê",
      "notes": "V·∫≠n chuy·ªÉn, ƒÉn u·ªëng, l∆∞u tr√∫"
    }}
  ],
  "risk": [
    {{
      "risk": "Th·ªùi ti·∫øt b·∫•t l·ª£i",
      "impact": "Cao",
      "likelihood": "Trung b√¨nh",
      "owner": "Ban T·ªï ch·ª©c",
      "mitigation": "Chu·∫©n b·ªã ph∆∞∆°ng √°n d·ª± ph√≤ng trong nh√†"
    }},
    {{
      "risk": "An ninh tr·∫≠t t·ª±",
      "impact": "Cao",
      "likelihood": "Th·∫•p",
      "owner": "C√¥ng an",
      "mitigation": "TƒÉng c∆∞·ªùng l·ª±c l∆∞·ª£ng b·∫£o v·ªá"
    }},
    {{
      "risk": "V∆∞·ª£t ng√¢n s√°ch",
      "impact": "Trung b√¨nh",
      "likelihood": "Trung b√¨nh",
      "owner": "Ban T√†i ch√≠nh",
      "mitigation": "Ki·ªÉm so√°t chi ph√≠ ch·∫∑t ch·∫Ω"
    }}
  ],
  "safety": [
    {{
      "topic": "An to√†n s·ª©c kh·ªèe",
      "actions": "Ki·ªÉm tra s·ª©c kh·ªèe tham gia, chu·∫©n b·ªã y t·∫ø"
    }},
    {{
      "topic": "An to√†n giao th√¥ng",
      "actions": "Ph√¢n lu·ªìng giao th√¥ng, h∆∞·ªõng d·∫´n ƒë·ªó xe"
    }},
    {{
      "topic": "An to√†n ch√°y n·ªï",
      "actions": "Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán, chu·∫©n b·ªã thi·∫øt b·ªã ch·ªØa ch√°y"
    }}
  ],
  "sustainability": [
    {{
      "topic": "M√¥i tr∆∞·ªùng",
      "actions": "S·ª≠ d·ª•ng v·∫≠t li·ªáu th√¢n thi·ªán, t√°i ch·∫ø r√°c th·∫£i"
    }},
    {{
      "topic": "Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng",
      "actions": "S·ª≠ d·ª•ng thi·∫øt b·ªã ti·∫øt ki·ªám ƒëi·ªán"
    }},
    {{
      "topic": "Gi·∫£m thi·ªÉu r√°c th·∫£i",
      "actions": "H·∫°n ch·∫ø s·ª≠ d·ª•ng ƒë·ªì nh·ª±a, ph√¢n lo·∫°i r√°c"
    }}
  ],
  "raci": [
    {{
      "task": "L·∫≠p k·∫ø ho·∫°ch t·ªïng th·ªÉ",
      "R": "Ban Ch·ªâ ƒë·∫°o",
      "A": "Ban T·ªï ch·ª©c",
      "C": "C√°c b·ªô, ng√†nh",
      "I": "ƒê·ªãa ph∆∞∆°ng"
    }},
    {{
      "task": "T·ªï ch·ª©c l·ªÖ k·ª∑ ni·ªám",
      "R": "Ban T·ªï ch·ª©c",
      "A": "ƒê∆°n v·ªã s·ª± ki·ªán",
      "C": "Ban An ninh",
      "I": "Kh√°ch m·ªùi"
    }},
    {{
      "task": "Truy·ªÅn th√¥ng",
      "R": "Ban Tuy√™n gi√°o",
      "A": "C∆° quan b√°o ch√≠",
      "C": "Ban T·ªï ch·ª©c",
      "I": "C√¥ng ch√∫ng"
    }}
  ],
  "kpi": [
    {{
      "metric": "S·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia",
      "definition": "T·ªïng s·ªë ng∆∞·ªùi tham d·ª± c√°c ho·∫°t ƒë·ªông",
      "target": "‚â• 100.000 ng∆∞·ªùi"
    }},
    {{
      "metric": "ƒê·ªô ph·ªß s√≥ng truy·ªÅn th√¥ng",
      "definition": "S·ªë l∆∞·ª£ng b√†i vi·∫øt, l∆∞·ª£t xem",
      "target": "‚â• 1.000.000 l∆∞·ª£t ti·∫øp c·∫≠n"
    }},
    {{
      "metric": "M·ª©c ƒë·ªô h√†i l√≤ng",
      "definition": "ƒê√°nh gi√° t·ª´ kh√°ch m·ªùi v√† ng∆∞·ªùi tham gia",
      "target": "‚â• 90% h√†i l√≤ng"
    }}
  ],
  "approvals": [
    {{
      "gate": "Ph√™ duy·ªát k·∫ø ho·∫°ch",
      "criteria": "K·∫ø ho·∫°ch chi ti·∫øt, ng√¢n s√°ch h·ª£p l√Ω",
      "owner": "Ban Ch·∫•p h√†nh Trung ∆∞∆°ng"
    }},
    {{
      "gate": "Ph√™ duy·ªát ng√¢n s√°ch",
      "criteria": "Ng√¢n s√°ch trong kh·∫£ nƒÉng, hi·ªáu qu·∫£ cao",
      "owner": "B·ªô T√†i ch√≠nh"
    }},
    {{
      "gate": "Ph√™ duy·ªát an ninh",
      "criteria": "ƒê·∫£m b·∫£o an ninh tr·∫≠t t·ª±",
      "owner": "B·ªô C√¥ng an"
    }}
  ]
}}

Gi·ªØ gi·ªçng trang tr·ªçng, tr√°nh chi ti·∫øt ch∆∞a x√°c th·ª±c, ∆∞u ti√™n th√¥ng ƒëi·ªáp chung v·ªÅ tinh th·∫ßn y√™u n∆∞·ªõc v√† ƒëo√†n k·∫øt d√¢n t·ªôc.
"""
    }
    
    print("ü§ñ Generating event plan content with Gemini AI...")
    
    try:
        # Call Gemini API
        response = client.chat.completions.create(
            model='gemini-2.5-pro',
            messages=[prompt],
            temperature=0.7,
            max_tokens=4000
        )
        
        # Extract content
        text = response.choices[0].message.content
        print("‚úÖ Received response from Gemini AI")
        
        # Save raw response
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        with open(os.path.join(OUTPUT_DIR, '_raw.txt'), 'w', encoding='utf-8') as f:
            f.write(text)
        
        # Extract JSON from response
        json_match = re.search(r'\{[\s\S]*\}', text)
        if not json_match:
            raise SystemExit('‚ùå Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi')
        
        # Parse JSON
        content = json.loads(json_match.group(0))
        
        # Save structured content
        with open(os.path.join(OUTPUT_DIR, 'content.json'), 'w', encoding='utf-8') as f:
            json.dump(content, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ ƒê√£ l∆∞u n·ªôi dung k·∫ø ho·∫°ch v√†o {OUTPUT_DIR}/content.json")
        print(f"üìä T·ªïng s·ªë m·ª•c ti√™u: {len(content.get('objectives', []))}")
        print(f"üìä T·ªïng s·ªë b√™n li√™n quan: {len(content.get('stakeholders', []))}")
        print(f"üìä T·ªïng s·ªë giai ƒëo·∫°n: {len(content.get('timeline', []))}")
        
        return content
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o n·ªôi dung: {e}")
        return None

if __name__ == "__main__":
    generate_event_plan()

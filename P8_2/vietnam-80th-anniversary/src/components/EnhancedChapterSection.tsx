'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { Chapter, Question } from '@/lib/game-data';
import EnhancedQuestionCard from './EnhancedQuestionCard';
import EnhancedGameCharacter from './EnhancedGameCharacter';
import AnimatedBackground from './AnimatedBackground';
import HistoricalTimeline from './HistoricalTimeline';
import { localAssetsManager } from '@/lib/local-assets';

interface EnhancedChapterSectionProps {
  chapter: Chapter;
  onChapterComplete: (score: number) => void;
  onNextChapter: () => void;
}

export default function EnhancedChapterSection({ 
  chapter, 
  onChapterComplete, 
  onNextChapter 
}: EnhancedChapterSectionProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [characterMessage, setCharacterMessage] = useState('');
  const [isCharacterSpeaking, setIsCharacterSpeaking] = useState(false);
  const [chapterImages, setChapterImages] = useState<string[]>([]);
  const [showTimeline, setShowTimeline] = useState(false);
  const [chapterIntro, setChapterIntro] = useState(true);

  useEffect(() => {
    // Load chapter images
    loadChapterImages();
    
    // Start chapter with character introduction
    startChapter();
  }, [chapter]);

  const loadChapterImages = async () => {
    try {
      console.log(`üîÑ EnhancedChapterSection: Loading images for chapter ${chapter.id}...`);
      // Load images from local assets
      const imageUrls = await localAssetsManager.getChapterImages(chapter.id);
      console.log(`‚úÖ EnhancedChapterSection: Images loaded for ${chapter.id}:`, imageUrls);
      setChapterImages(imageUrls);
    } catch (error) {
      console.error('‚ùå EnhancedChapterSection: Error loading images:', error);
      // Fallback to placeholder images
      setChapterImages([
        'https://via.placeholder.com/400x300/ff0000/ffffff?text=H√¨nh+·∫£nh+L·ªãch+s·ª≠+1',
        'https://via.placeholder.com/400x300/ff6600/ffffff?text=H√¨nh+·∫£nh+L·ªãch+s·ª≠+2',
        'https://via.placeholder.com/400x300/ffcc00/ffffff?text=H√¨nh+·∫£nh+L·ªãch+s·ª≠+3',
        'https://via.placeholder.com/400x300/00ff00/ffffff?text=H√¨nh+·∫£nh+L·ªãch+s·ª≠+4'
      ]);
    }
  };

  const startChapter = async () => {
    const introMessages = {
      colonial: "Ch√†o b·∫°n! T√¥i l√† Anh Minh. H√£y c√πng t√¥i quay ng∆∞·ª£c th·ªùi gian v·ªÅ nh·ªØng ng√†y ƒëen t·ªëi khi ƒë·∫•t n∆∞·ªõc ta c√≤n ch√¨m trong √°ch th·ªëng tr·ªã c·ªßa th·ª±c d√¢n Ph√°p. ƒê√¢y l√† th·ªùi k·ª≥ ƒëau th∆∞∆°ng nh∆∞ng c≈©ng l√† th·ªùi k·ª≥ nhen nh√≥m nh·ªØng ng·ªçn l·ª≠a y√™u n∆∞·ªõc ƒë·∫ßu ti√™n...",
      revolution: "T·ª´ trong b√≥ng t·ªëi, ng·ªçn l·ª≠a c√°ch m·∫°ng ƒë√£ b√πng l√™n! H√£y c√πng t√¥i theo d√µi h√†nh tr√¨nh 30 nƒÉm t√¨m ƒë∆∞·ªùng c·ª©u n∆∞·ªõc c·ªßa B√°c H·ªì, t·ª´ nh·ªØng ng√†y ƒë·∫ßu ra ƒëi ƒë·∫øn s·ª± ra ƒë·ªùi c·ªßa ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam v√† cu·ªôc C√°ch m·∫°ng Th√°ng T√°m vƒ© ƒë·∫°i...",
      independence: "V√† r·ªìi gi√¢y ph√∫t thi√™ng li√™ng nh·∫•t trong l·ªãch s·ª≠ d√¢n t·ªôc ƒë√£ ƒë·∫øn! Ng√†y 2/9/1945, t·∫°i Qu·∫£ng tr∆∞·ªùng Ba ƒê√¨nh, B√°c H·ªì ƒë√£ ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p, khai sinh n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a. H√†ng tri·ªáu tr√°i tim Vi·ªát Nam c√πng h√≤a chung nh·ªãp ƒë·∫≠p t·ª± do...",
      construction: "T·ª´ ng√†y ƒë·ªôc l·∫≠p, d√¢n t·ªôc ta ƒë√£ tr·∫£i qua bi·∫øt bao th·ª≠ th√°ch ƒë·ªÉ x√¢y d·ª±ng ƒë·∫•t n∆∞·ªõc. Cu·ªôc kh√°ng chi·∫øn ch·ªëng Ph√°p v√† M·ªπ, x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi, v√† b∆∞·ªõc ngo·∫∑t ƒë·ªïi m·ªõi nƒÉm 1986 ƒë√£ m·ªü ra m·ªôt trang s·ª≠ m·ªõi...",
      modern: "V√† h√¥m nay, sau 80 nƒÉm, Vi·ªát Nam ƒë√£ tr·ªü th√†nh m·ªôt qu·ªëc gia ph√°t tri·ªÉn, hi·ªán ƒë·∫°i v·ªõi nh·ªØng th√†nh t·ª±u r·ª±c r·ª°. T·ª´ n∆∞·ªõc ngh√®o ƒë√≥i tr·ªü th√†nh n∆∞·ªõc c√≥ thu nh·∫≠p trung b√¨nh, h·ªôi nh·∫≠p s√¢u r·ªông v·ªõi th·∫ø gi·ªõi..."
    };

    const message = introMessages[chapter.id as keyof typeof introMessages] || '';
    setCharacterMessage(message);
    setIsCharacterSpeaking(true);
    
    // Play background speech
    await localAssetsManager.playAudio(`chapter-${chapter.id}`);
    
    // Simulate character speaking duration
    setTimeout(() => {
      setIsCharacterSpeaking(false);
      setChapterIntro(false);
      setIsPlaying(true);
    }, 3000);
  };

  const handleAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      setScore(score + 10);
    }
  };

  const handleTimeUp = () => {
    // Move to next question or complete chapter
    if (currentQuestionIndex < chapter.questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      completeChapter();
    }
  };

  const handleNext = () => {
    // Move to next question or complete chapter
    if (currentQuestionIndex < chapter.questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      completeChapter();
    }
  };

  const completeChapter = () => {
    setIsPlaying(false);
    onChapterComplete(score);
    
    const completionMessage = `Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh ch∆∞∆°ng "${chapter.title}" v·ªõi ${score} ƒëi·ªÉm. Ki·∫øn th·ª©c l·ªãch s·ª≠ c·ªßa b·∫°n th·∫≠t ƒë√°ng khen ng·ª£i! H√£y ti·∫øp t·ª•c h√†nh tr√¨nh kh√°m ph√° l·ªãch s·ª≠ v·∫ª vang c·ªßa d√¢n t·ªôc!`;
    setCharacterMessage(completionMessage);
    setIsCharacterSpeaking(true);
    
    setTimeout(() => {
      setIsCharacterSpeaking(false);
      onNextChapter();
    }, 4000);
  };

  const currentQuestion = chapter.questions[currentQuestionIndex];

  if (chapterIntro) {
    return (
      <div className="min-h-screen relative overflow-hidden">
        <AnimatedBackground chapterId={chapter.id} />
        
        <div className="relative z-10 flex items-center justify-center min-h-screen p-4">
          <div className="max-w-6xl w-full">
            <div className="bg-white bg-opacity-95 rounded-3xl shadow-2xl p-8">
              <div className="text-center mb-8">
                <h1 className="text-4xl font-bold text-gray-800 mb-4">{chapter.title}</h1>
                <p className="text-xl text-gray-600 leading-relaxed">{chapter.description}</p>
              </div>
              
              <div className="flex justify-center">
                <EnhancedGameCharacter
                  isSpeaking={isCharacterSpeaking}
                  message={characterMessage}
                  chapterId={chapter.id}
                  emotion="thoughtful"
                />
              </div>
              
              <div className="text-center mt-8">
                <div className="animate-pulse text-lg text-gray-600">
                  ƒêang chu·∫©n b·ªã c√¢u h·ªèi...
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      <AnimatedBackground chapterId={chapter.id} />
      
      <div className="relative z-10">
        {/* Enhanced Header */}
        <div className="bg-white bg-opacity-95 shadow-2xl backdrop-blur-sm">
          <div className="max-w-7xl mx-auto px-6 py-8">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <h1 className="text-4xl font-bold text-gray-800 mb-2">{chapter.title}</h1>
                <p className="text-lg text-gray-600 leading-relaxed max-w-3xl">{chapter.description}</p>
              </div>
              
              <div className="text-right">
                <div className="text-3xl font-bold text-blue-600 mb-2">{score} ƒëi·ªÉm</div>
                <div className="text-sm text-gray-500">
                  C√¢u {currentQuestionIndex + 1}/{chapter.questions.length}
                </div>
                <button
                  onClick={() => setShowTimeline(!showTimeline)}
                  className="mt-2 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                >
                  {showTimeline ? '·∫®n' : 'Hi·ªán'} D√≤ng th·ªùi gian
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Timeline */}
        {showTimeline && (
          <div className="bg-white bg-opacity-95 shadow-lg">
            <HistoricalTimeline currentChapter={chapter.id} />
          </div>
        )}

        {/* Main Content */}
        <div className="max-w-7xl mx-auto px-6 py-8">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Character */}
            <div className="lg:col-span-1">
              <EnhancedGameCharacter
                isSpeaking={isCharacterSpeaking}
                message={characterMessage}
                chapterId={chapter.id}
                emotion={isPlaying ? 'happy' : 'thoughtful'}
              />
            </div>

            {/* Game Content */}
            <div className="lg:col-span-3">
              {isPlaying && currentQuestion ? (
                <EnhancedQuestionCard
                  question={currentQuestion}
                  onAnswer={handleAnswer}
                  timeLimit={30}
                  onTimeUp={handleTimeUp}
                  onNext={handleNext}
                  questionNumber={currentQuestionIndex + 1}
                  totalQuestions={chapter.questions.length}
                />
              ) : !isPlaying ? (
                <div className="text-center py-12">
                  <div className="animate-pulse">
                    <div className="w-16 h-16 bg-red-500 rounded-full mx-auto mb-4"></div>
                    <p className="text-lg text-gray-600">ƒêang chu·∫©n b·ªã...</p>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
